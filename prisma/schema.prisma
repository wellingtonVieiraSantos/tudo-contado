datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  income          Income[]
  expense         Expense[]
  productLifetime ProductLifetime[]
  productPrice    ProductPrice[]
  comments        Comment[]
  ratings         Rating[]
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Income {
  id          String     @id @default(cuid())
  userId      String
  type        IncomeType
  value       Int
  date        DateTime
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Expense {
  id          String       @id @default(cuid())
  userId      String
  type        ExpenseType
  value       Int
  date        DateTime
  description String
  category    CateroryType
  paid        Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Product {
  id        String       @id @default(cuid())
  name      String
  category  CateroryType
  createdAt DateTime     @default(now())

  variants ProductVariant[]
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  brand       String
  description String?

  productLifetime ProductLifetime[]
  productPrice     ProductPrice[]
  comments         Comment[]
  ratings          Rating[]

  product Product @relation(fields: [productId], references: [id])
}

model ProductPrice {
  id               String   @id @default(cuid())
  productVariantId String
  userId           String
  value            Int
  location         String
  date             DateTime

  createdAt DateTime @default(now())

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([userId, productVariantId, location, date])
}

model Comment {
  id               String   @id @default(cuid())
  productVariantId String
  userId           String
  content          String
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([productVariantId, userId])
}

model Rating {
  id               String     @id @default(cuid())
  productVariantId String
  userId           String
  value            RatingType
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([productVariantId, userId])
}

model ProductLifetime {
  id               String    @id @default(cuid())
  productVariantId String
  userId           String
  purchaseDate     DateTime
  endDate          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([userId, productVariantId])
}

enum IncomeType {
  FIXED
  VARIABLE
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum RatingType {
  ONE_STAR
  TWO_STAR
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
}

enum UnitType {
  UNIT
  KG
  L
  M
}

enum CateroryType {
  HOUSE
  FOOD
  TRANSPORT
  EDUCATION
  HEALTH
  CLOTHING
  TECH
  PERSONAL_CARE
  ENTERTAINMENT
  PETS
  FINANCIAL
  OTHER
}
