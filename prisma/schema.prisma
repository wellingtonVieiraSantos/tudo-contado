generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  expense       Expense[]
  income        Income[]
  creditCard    CreditCard[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model CreditCard {
  id          String    @id @default(cuid())
  userId      String
  lastNumber  String
  creditLimit Int
  expMonth    String
  expYear     String
  billingDay  String
  holder      String
  cardBrand   CardBrand @default(OTHER)
  expense     Expense[]
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, lastNumber, expMonth, expYear, cardBrand])
}

model Income {
  id          String     @id @default(cuid())
  userId      String
  type        IncomeType @default(ACTIVE)
  value       Int
  date        DateTime   @db.Date
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
}

model Expense {
  id           String            @id @default(cuid())
  userId       String
  description  String
  category     CategoryType      @default(OTHER)
  value        Int
  date         DateTime          @db.Date 
  method       PaymentMethodType @default(DEBIT)
  creditCardId String?
  installments Int?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id])
  creditCard   CreditCard?       @relation(fields: [creditCardId], references: [id])
}

enum IncomeType {
  ACTIVE
  PASSIVE
  EXTRA
  CAPITAL_GAIN
}

enum PaymentMethodType {
  CREDIT
  DEBIT
}

enum CardBrand {
  VISA
  MASTERCARD
  ELO
  HIPERCARD
  AMEX
  OTHER
}

enum CategoryType {
  HOUSE
  FOOD
  TRANSPORT
  EDUCATION
  HEALTH
  CLOTHING
  TECH
  PERSONAL_CARE
  ENTERTAINMENT
  PETS
  FINANCIAL
  OTHER
}
