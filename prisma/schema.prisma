generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  Authenticator   Authenticator[]
  comments        Comment[]
  expense         Expense[]
  income          Income[]
  productLifetime ProductLifetime[]
  productPrice    ProductPrice[]
  ratings         Rating[]
  sessions        Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model CreditCard {
  id         String    @id @default(cuid())
  lastNumber Int
  validity   DateTime
  holder     String
  brand      Brand[]
  income     Income[]
  expense    Expense[]
}

model Income {
  id           String      @id @default(cuid())
  userId       String
  creditCardId String?
  type         IncomeType  @default(VARIABLE)
  value        Int
  date         DateTime
  description  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id])
}

model Expense {
  id            String            @id @default(cuid())
  userId        String
  creditCardId  String?
  type          ExpenseType       @default(VARIABLE)
  paymentMethod PaymentMethodType @default(PIX)
  value         Int
  date          DateTime
  description   String
  category      CategoryType      @default(OTHER)
  paid          Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id])
  creditCard    CreditCard?       @relation(fields: [creditCardId], references: [id])
}

model Product {
  id              String           @id @default(cuid())
  name            String
  createdAt       DateTime         @default(now())
  category        ProductCategory
  normalized_name String           @unique
  variants        ProductVariant[]
}

model Brand {
  id              String           @id @default(cuid())
  creditCardId    String?
  name            String
  createdAt       DateTime         @default(now())
  normalized_name String           @unique
  variants        ProductVariant[]
  creditCard      CreditCard?      @relation(fields: [creditCardId], references: [id])
}

model ProductVariant {
  id              String            @id @default(cuid())
  productId       String
  description     String?
  brandId         String?
  brandOrigin     BrandOriginType   @default(BRANDED)
  comments        Comment[]
  productLifetime ProductLifetime[]
  productPrice    ProductPrice[]
  brand           Brand?            @relation(fields: [brandId], references: [id])
  product         Product           @relation(fields: [productId], references: [id])
  ratings         Rating[]

  @@unique([productId, brandId])
}

model ProductPrice {
  id               String         @id @default(cuid())
  productVariantId String
  userId           String
  value            Int
  location         String
  date             DateTime
  createdAt        DateTime       @default(now())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, productVariantId, location, date])
}

model Comment {
  id               String         @id @default(cuid())
  productVariantId String
  userId           String
  content          String
  createdAt        DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([productVariantId, userId])
}

model Rating {
  id               String         @id @default(cuid())
  productVariantId String
  userId           String
  value            RatingType
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([productVariantId, userId])
}

model ProductLifetime {
  id               String         @id @default(cuid())
  productVariantId String
  userId           String
  purchaseDate     DateTime
  endDate          DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, productVariantId])
}

enum IncomeType {
  FIXED
  VARIABLE
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum PaymentMethodType {
  PIX
  MONEY
  CREDIT_CARD
  DEBIT_CARD
}

enum RatingType {
  ONE_STAR
  TWO_STAR
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
}

enum UnitType {
  UNIT
  KG
  L
  M
}

enum CategoryType {
  HOUSE
  FOOD
  TRANSPORT
  EDUCATION
  HEALTH
  CLOTHING
  TECH
  PERSONAL_CARE
  ENTERTAINMENT
  PETS
  FINANCIAL
  OTHER
}

enum BrandOriginType {
  BRANDED
  UNBRANDED
}

enum ProductCategory {
  HORTIFRUTI
  CARNES_PEIXES
  FRIOS_LATICINIOS
  PADARIA_CONFEITARIA
  BEBIDAS
  MERCEARIA
  ENLATADOS_CONSERVAS
  SNACKS_DOCES
  CONGELADOS
  TEMPEROS_CONDIMENTOS
  MASSAS_MOLHOS
  PRODUTOS_NATURAIS
  HIGIENE_PESSOAL
  CUIDADOS_CABELO
  DESODORANTES
  CUIDADOS_PELE
  BARBEARIA
  HIGIENE_BUCAL
  ABSORVENTES_FRALDAS
  LIMPEZA_GERAL
  UTENSILIOS_LIMPEZA
  INSETICIDAS
  INFANTIL_FRALDAS
  INFANTIL_PAPINHAS
  INFANTIL_HIGIENE
  COSTURA
  ARTESANATO
  TECIDOS
  ESCOLAR
  PAPELARIA
  DESCARTAVEIS
  UTENSILIOS_COZINHA
  ELETRICOS_BASICOS
  LIMPEZA_CASA
  TEXTIL_CASA
  PET_RACAO
  PET_HIGIENE
  PET_ACESSORIOS
}
