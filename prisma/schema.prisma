datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  income        Income[]
  expense       Expense[]
  products      Product[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Income {
  id          String     @id @default(cuid())
  userId      String
  type        IncomeType
  value       Int
  date        DateTime
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Expense {
  id          String      @id @default(cuid())
  userId      String
  type        ExpenseType
  value       Int
  date        DateTime
  description String
  paid        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Product {
  id           String      @id @default(cuid())
  userId       String
  name         String
  price        Int
  category     String
  rating       RatingType?
  brand        String?
  review       String?
  purchaseDate DateTime
  endDate      DateTime?
  quantity     Decimal
  unit         UnitType
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum IncomeType {
  FIXED
  VARIABLE
}

enum ExpenseType {
  FIXED
  VARIABLE
}

enum RatingType {
  ONE_STAR
  TWO_STAR
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
}

enum UnitType {
  UNIT
  KG
  L
  M
}
